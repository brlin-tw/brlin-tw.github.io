# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
do-static-analysis:
  stage: test
  rules:
  - if: "$CI_COMMIT_TAG == null"
  needs: []
  image: ubuntu:22.04
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    PRE_COMMIT_HOME: "${CI_PROJECT_DIR}/.cache/pre-commit"
    SHELLCHECK_DIR: "${CI_PROJECT_DIR}/.cache/shellcheck-stable"
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
    - "${PIP_CACHE_DIR}"
    - "${PRE_COMMIT_HOME}"
    - "${SHELLCHECK_DIR}"
  script:
  - "./continuous-integration/do-static-analysis.install-system-deps.sh"
  - "./continuous-integration/do-static-analysis.sh"
generate-build-artifacts:
  stage: build
  rules:
  - if: "$CI_COMMIT_TAG"
  needs: []
  image: ubuntu:22.04
  artifacts:
    paths:
    - "${CI_PROJECT_NAME}-*.tar*"
  script:
  - "./continuous-integration/generate-build-artifacts.install-system-deps.sh"
  - "./continuous-integration/generate-build-artifacts.sh"
upload-release-assets:
  stage: deploy
  rules:
  - if: "$CI_COMMIT_TAG"
  needs:
  - generate-build-artifacts
  image: curlimages/curl:latest
  script:
  - "./continuous-integration/upload-gitlab-generic-packages.sh"
create-release:
  stage: deploy
  rules:
  - if: "$CI_COMMIT_TAG"
  needs:
  - generate-build-artifacts
  - upload-release-assets
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
  - apk add bash git
  - "./continuous-integration/generate-release-description.sh"
  - "./continuous-integration/create-gitlab-release.sh"
test-pages:
  stage: test
  rules:
  - if: "$CI_COMMIT_TAG == null"
  image: ruby:latest
  variables:
    LC_ALL: C.UTF-8
  before_script:
  - gem install bundler
  - bundle install
  script:
  - bundle exec jekyll build -d test
  artifacts:
    paths:
    - test
pages:
  stage: deploy
  image: ruby:latest
  rules:
  - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
  needs:
  - test-pages
  variables:
    JEKYLL_ENV: production
    LC_ALL: C.UTF-8
  before_script:
  - gem install bundler
  - bundle install
  script:
  - bundle exec jekyll build -d public
  artifacts:
    paths:
    - public
stages:
- test
sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
